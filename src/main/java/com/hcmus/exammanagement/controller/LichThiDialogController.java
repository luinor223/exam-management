package com.hcmus.exammanagement.controller;

import com.hcmus.exammanagement.bus.ChungChiBUS;
import com.hcmus.exammanagement.bus.LichThiBUS;
import com.hcmus.exammanagement.dto.ChungChiDTO;
import com.hcmus.exammanagement.dto.LichThiDTO;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.stage.Stage;
import javafx.util.StringConverter;
import lombok.extern.slf4j.Slf4j;

import java.sql.Timestamp;
import java.time.LocalDate;
import java.util.List;

@Slf4j
public class LichThiDialogController {

    @FXML private Button btnThem;
    @FXML private Button btnHuy;
    @FXML private ComboBox<ChungChiDTO> chungChiComboBox;
    @FXML private TextField gioThiField;
    @FXML private DatePicker ngayThiPicker;
    @FXML private TextField thoiLuongThiField;

    private List<ChungChiDTO> chungChiList;
    private LichThiDTO lichThiDTO;

    @FXML
    private void initialize() {
        try {
            chungChiList = ChungChiBUS.layDSChungChi(); // Assuming this method fetches all ChungChiDTOs
        } catch (Exception e) {
            log.error("Error fetching ChungChiDTOs: {}", e.getMessage());
        }

        chungChiComboBox.setConverter(new StringConverter<>() {
            @Override
            public String toString(ChungChiDTO chungChi) {
                return chungChi != null ? chungChi.getTenChungChi() : "";
            }

            @Override
            public ChungChiDTO fromString(String string) {
                return null;
            }
        });
        chungChiComboBox.setItems(FXCollections.observableArrayList(chungChiList));
    }

    public void setLichThi(LichThiDTO lichThiDTO) {
        this.lichThiDTO = lichThiDTO;

        if (lichThiDTO != null) {
            ngayThiPicker.setValue(lichThiDTO.getNgayGioThi().toLocalDateTime().toLocalDate());
            gioThiField.setText(lichThiDTO.getNgayGioThi().toLocalDateTime().toLocalTime().toString());
            thoiLuongThiField.setText(lichThiDTO.getThoiLuongThi().toString());

            // Find and select the matching ChungChiDTO
            for (ChungChiDTO chungChi : chungChiList) {
                if (chungChi.getMaChungChi().equals(lichThiDTO.getChungChi().getMaChungChi())) {
                    chungChiComboBox.getSelectionModel().select(chungChi);
                    break;
                }
            }
        }
    }

    @FXML
    void btnHuy(ActionEvent event) {
        Stage stage = (Stage) btnHuy.getScene().getWindow();
        stage.close();
    }

    @FXML
    public void btnThem(ActionEvent event) {
        try {
            // Validate input
            if (ngayThiPicker.getValue() == null) {
                showAlert(Alert.AlertType.WARNING, "Cảnh báo", "Ngày thi trống", "Vui lòng chọn ngày thi");
                return;
            }

            if (gioThiField.getText().trim().isEmpty()) {
                showAlert(Alert.AlertType.WARNING, "Cảnh báo", "Giờ thi trống", "Vui lòng nhập giờ thi");
                return;
            }

            if (thoiLuongThiField.getText().trim().isEmpty()) {
                showAlert(Alert.AlertType.WARNING, "Cảnh báo", "Thời lượng thi trống", "Vui lòng nhập thời lượng thi");
                return;
            }

            if (chungChiComboBox.getSelectionModel().isEmpty()) {
                showAlert(Alert.AlertType.WARNING, "Cảnh báo", "Chứng chỉ trống", "Vui lòng chọn chứng chỉ");
                return;
            }

            // Parse input
            LocalDate ngayThi = ngayThiPicker.getValue();
            String gioThi = gioThiField.getText().trim();
            Integer thoiLuongThi = Integer.parseInt(thoiLuongThiField.getText().trim());
            ChungChiDTO chungChi = chungChiComboBox.getSelectionModel().getSelectedItem();

            // Create timestamp
            Timestamp ngayGioThi = Timestamp.valueOf(ngayThi.atTime(
                    Integer.parseInt(gioThi.split(":")[0]),
                    Integer.parseInt(gioThi.split(":")[1])
            ));

            // Create LichThiDTO
            if (this.lichThiDTO == null) {
                LichThiDTO lichThi = new LichThiDTO(
                        null, // maLichThi will be generated by the database
                        ngayGioThi,
                        thoiLuongThi,
                        chungChi,
                        0, // soLuongHienTai
                        0  // soLuongToiDa
                );
                LichThiBUS.taoLichThi(lichThi);
                showAlert(Alert.AlertType.INFORMATION, "Thành công", "Thêm lịch thi thành công", null);
            }
            else {
                LichThiBUS.capNhatLichThi(this.lichThiDTO);
                showAlert(Alert.AlertType.INFORMATION, "Thành công", "Cập nhật lịch thi thành công", null);
            }

            Stage stage = (Stage) btnThem.getScene().getWindow();
            stage.close();

        } catch (NumberFormatException e) {
            showAlert(Alert.AlertType.ERROR, "Lỗi", "Thời lượng thi không hợp lệ", "Vui lòng nhập số nguyên");
        } catch (Exception e) {
            showAlert(Alert.AlertType.ERROR, "Lỗi", "Không thể thêm lịch thi", e.getMessage());
        }
    }

    private void showAlert(Alert.AlertType alertType, String title, String header, String content) {
        Alert alert = new Alert(alertType);
        alert.setTitle(title);
        alert.setHeaderText(header);
        alert.setContentText(content);
        alert.showAndWait();
    }

}
